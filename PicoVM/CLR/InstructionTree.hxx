#ifndef __INSTRUCTIONTREE_HXX_
#define __INSTRUCTIONTREE_HXX_

#include <map>
#include <memory>
#include <vector>
#include <string>
#include <cstdint>
#include <mapbox/variant.hpp>

typedef mapbox::util::variant<int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t, float, double> argument;

// Enum for internal representation of instructions
enum struct Instruction : uint16_t {
    i_nop = 0x00,
    i_break = 0x01,
    i_ldnull = 0x14,
    i_ldc_i4 = 0x20,
    i_ldc_i8 = 0x21,
    i_ldc_r4 = 0x22,
    i_ldc_r8 = 0x23,
    i_dup = 0x25,
    i_pop = 0x26,
    i_jmp = 0x27,
    i_call = 0x28,
    i_calli = 0x29,
    i_ret = 0x2A,
    i_br = 0x38,
    i_brfalse = 0x39,
    i_brtrue = 0x3A,
    i_beq = 0x3B,
    i_bge = 0x3C,
    i_bgt = 0x3D,
    i_ble = 0x3E,
    i_blt = 0x3F,
    i_bne_un = 0x40,
    i_bge_un = 0x41,
    i_bgt_un = 0x42,
    i_ble_un = 0x43,
    i_blt_un = 0x44,
    i_switch = 0x45,
    i_ldind_i1 = 0x46,
    i_ldind_u1 = 0x47,
    i_ldind_i2 = 0x48,
    i_ldind_u2 = 0x49,
    i_ldind_i4 = 0x4A,
    i_ldind_u4 = 0x4B,
    i_ldind_i8 = 0x4C,
    i_ldind_i = 0x4D,
    i_ldind_r4 = 0x4E,
    i_ldind_r8 = 0x4F,
    i_ldind_ref = 0x50,
    i_stind_ref = 0x51,
    i_stind_i1 = 0x52,
    i_stind_i2 = 0x53,
    i_stind_i4 = 0x54,
    i_stind_i8 = 0x55,
    i_stind_r4 = 0x56,
    i_stind_r8 = 0x57,
    i_add = 0x58,
    i_sub = 0x59,
    i_mul = 0x5A,
    i_div = 0x5B,
    i_div_un = 0x5C,
    i_rem = 0x5D,
    i_rem_un = 0x5E,
    i_and = 0x5F,
    i_or = 0x60,
    i_xor = 0x61,
    i_shl = 0x62,
    i_shr = 0x63,
    i_shr_un = 0x64,
    i_neg = 0x65,
    i_not = 0x66,
    i_conv_i1 = 0x67,
    i_conv_i2 = 0x68,
    i_conv_i4 = 0x69,
    i_conv_i8 = 0x6A,
    i_conv_r4 = 0x6B,
    i_conv_r8 = 0x6C,
    i_conv_u4 = 0x6D,
    i_conv_u8 = 0x6E,
    i_callvirt = 0x6F,
    i_cpobj = 0x70,
    i_ldobj = 0x71,
    i_ldstr = 0x72,
    i_newobj = 0x73,
    i_castclass = 0x74,
    i_isinst = 0x75,
    i_conv_r_un = 0x76,
    i_unbox = 0x79,
    i_throw = 0x7A,
    i_ldfld = 0x7B,
    i_ldflda = 0x7C,
    i_stfld = 0x7D,
    i_ldsfld = 0x7E,
    i_ldsflda = 0x7F,
    i_stsfld = 0x80,
    i_stobj = 0x81,
    i_conv_ovf_i1_un = 0x82,
    i_conv_ovf_i2_un = 0x83,
    i_conv_ovf_i4_un = 0x84,
    i_conv_ovf_i8_un = 0x85,
    i_conv_ovf_u1_un = 0x86,
    i_conv_ovf_u2_un = 0x87,
    i_conv_ovf_u4_un = 0x88,
    i_conv_ovf_u8_un = 0x89,
    i_conv_ovf_i_un = 0x8A,
    i_conv_ovf_u_un = 0x8B,
    i_box = 0x8C,
    i_newarr = 0x8D,
    i_ldlen = 0x8E,
    i_ldelema = 0x8F,
    i_ldelem_i1 = 0x90,
    i_ldelem_u1 = 0x91,
    i_ldelem_i2 = 0x92,
    i_ldelem_u2 = 0x93,
    i_ldelem_i4 = 0x94,
    i_ldelem_u4 = 0x95,
    i_ldelem_i8 = 0x96,
    i_ldelem_i = 0x97,
    i_ldelem_r4 = 0x98,
    i_ldelem_r8 = 0x99,
    i_ldelem_ref = 0x9A,
    i_stelem_i = 0x9B,
    i_stelem_i1 = 0x9C,
    i_stelem_i2 = 0x9D,
    i_stelem_i4 = 0x9E,
    i_stelem_i8 = 0x9F,
    i_stelem_r4 = 0xA0,
    i_stelem_r8 = 0xA1,
    i_stelem_ref = 0xA2,
    i_ldelem = 0xA3,
    i_stelem = 0xA4,
    i_unbox_any = 0xA5,
    i_conv_ovf_i1 = 0xB3,
    i_conv_ovf_u1 = 0xB4,
    i_conv_ovf_i2 = 0xB5,
    i_conv_ovf_u2 = 0xB6,
    i_conv_ovf_i4 = 0xB7,
    i_conv_ovf_u4 = 0xB8,
    i_conv_ovf_i8 = 0xB9,
    i_conv_ovf_u8 = 0xBA,
    i_refanyval = 0xC2,
    i_ckfinite = 0xC3,
    i_mkrefany = 0xC6,
    i_ldtoken = 0xD0,
    i_conv_u2 = 0xD1,
    i_conv_u1 = 0xD2,
    i_conv_i = 0xD3,
    i_conv_ovf_i = 0xD4,
    i_conv_ovf_u = 0xD5,
    i_add_ovf = 0xD6,
    i_add_ovf_un = 0xD7,
    i_mul_ovf = 0xD8,
    i_mul_ovf_un = 0xD9,
    i_sub_ovf = 0xDA,
    i_sub_ovf_un = 0xDB,
    i_endfinally = 0xDC,
    i_leave = 0xDD,
    i_leave_s = 0xDE,
    i_stind_i = 0xDF,
    i_conv_u = 0xE0,
    i_arglist = 0x00FE,
    i_ceq = 0x01FE,
    i_cgt = 0x02FE,
    i_cgt_un = 0x03FE,
    i_clt = 0x04FE,
    i_clt_un = 0x05FE,
    i_ldftn = 0x06FE,
    i_ldvirtftn = 0x07FE,
    i_ldarg = 0x09FE,
    i_ldarga = 0x0AFE,
    i_starg = 0x0BFE,
    i_ldloc = 0x0CFE,
    i_ldloca = 0x0DFE,
    i_stloc = 0x0EFE,
    i_localloc = 0x0FFE,
    i_endfilter = 0x11FE,
    i_initobj = 0x15FE,
    i_cpblk = 0x17FE,
    i_initblk = 0x18FE,
    i_rethrow = 0x1AFE,
    i_sizeof = 0x1CFE,
    i_refanytype = 0x1DFE,

    // These instructions are non-standard, their purpose is to be used internally by the VM in order to optimize evaluation.

    // Integer arithmetics. 
    i_iadd = 0x0158,
    i_iadd_ovf = 0x01D6,
    i_iadd_ovf_un = 0x01D7,
    i_isub = 0x0159,
    i_isub_ovf = 0x01DA,
    i_isub_ovf_un = 0x01DB,
    i_imul = 0x015A,
    i_imul_ovf = 0x01D8,
    i_imul_ovf_un = 0x01D9,
    i_idiv = 0x015B,
    i_idiv_un = 0x015C,
    i_irem = 0x015D,
    i_irem_un = 0x015E,
    i_ineg = 0x0165,
    i_ladd = 0x0258,
    i_ladd_ovf = 0x02D6,
    i_ladd_ovf_un = 0x02D7,
    i_lsub = 0x0259,
    i_lsub_ovf = 0x02DA,
    i_lsub_ovf_un = 0x02DB,
    i_lmul = 0x025A,
    i_lmul_ovf = 0x02D8,
    i_lmul_ovf_un = 0x02D9,
    i_ldiv = 0x025B,
    i_ldiv_un = 0x025C,
    i_lrem = 0x025D,
    i_lrem_un = 0x025E,
    i_lneg = 0x0265,

    // Floating point arithmetics
    i_fadd = 0x0358,
    i_fsub = 0x0359,
    i_fmul = 0x035A,
    i_fdiv = 0x035B,
    i_frem = 0x035D,
    i_fneg = 0x0365,

    // Bitwise operators
    i_iand = 0x015F,
    i_ior = 0x0160,
    i_ixor = 0x0161,
    i_ishl = 0x0162,
    i_ishr = 0x0163,
    i_ishr_un = 0x0164,
    i_inot = 0x0166,
    i_land = 0x025F,
    i_lor = 0x0260,
    i_lxor = 0x0261,
    i_lshl = 0x0262,
    i_lshr = 0x0263,
    i_lshr_un = 0x0264,
    i_lnot = 0x0266,

    // Conversion operators
    i_i2b = 0x0167,
    i_i2ub = 0x01D2,
    i_i2s = 0x0168,
    i_i2us = 0x01D1,
    i_i2l = 0x016A,
    i_i2f = 0x016B,
    i_i2d = 0x016C,
    i_l2b = 0x0267,
    i_l2ub = 0x02D2,
    i_l2s = 0x0268,
    i_l2us = 0x02D1,
    i_l2i = 0x0269,
    i_l2f = 0x026B,
    i_l2d = 0x026C,
    i_ui2f = 0x046B,
    i_ui2d = 0x046B,
    i_ul2f = 0x056B,
    i_ul2d = 0x056B,
    i_f2b = 0x0367,
    i_f2ub = 0x03D2,
    i_f2s = 0x0368,
    i_f2us = 0x03D1,
    i_f2i = 0x0369,
    i_f2ui = 0x036D,
    i_f2l = 0x036A,
    i_f2ul = 0x036E,
    i_d2f = 0x036B,

    // Checked conversion operators
    i2b_ovf = 0x01B3,
    i2ub_ovf = 0x01B4,
    i2s_ovf = 0x01B5,
    i2us_ovf = 0x01B6,
    i2ui_ovf = 0x01B8,
    i2ul_ovf = 0x01BA,

    ui2b_ovf = 0x02B3,
    ui2ub_ovf = 0x02B4,
    ui2s_ovf = 0x02B5,
    ui2us_ovf = 0x02B6,
    ui2i_ovf = 0x02B7,

    l2b_ovf = 0x03B3,
    l2ub_ovf = 0x03B4,
    l2s_ovf = 0x03B5,
    l2us_ovf = 0x03B6,
    l2i_ovf = 0x03B7,
    l2ui_ovf = 0x03B8,

    ul2b_ovf = 0x04B3,
    ul2ub_ovf = 0x04B4,
    ul2s_ovf = 0x04B5,
    ul2us_ovf = 0x04B6,
    ul2i_ovf = 0x04B7,
    ul2iu_ovf = 0x04B8,
    ul2l_ovf = 0x04B9,

    i_f2b_ovf = 0x05B3,
    i_f2ub_ovf = 0x05B4,
    i_f2s_ovf = 0x05B5,
    i_f2us_ovf = 0x05B6,
    i_f2i_ovf = 0x05B7,
    i_f2ui_ovf = 0x05B8,
    i_f2l_ovf = 0x05B9,
    i_f2ul_ovf = 0x05BA,
};

struct InstructionTree {
    // Branch targets, will be suitable for linking
    std::vector<ptrdiff_t> targets;
    // offset -> (instruction, [arg1, arg2, ...])
    typedef std::map<ptrdiff_t, std::pair<Instruction, std::vector<argument> > > TreeMap;

    std::string str() const;

    static std::shared_ptr<InstructionTree> MakeTree(const std::vector<uint8_t>& methodData);

private:
    TreeMap tree;
};

#endif
